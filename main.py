from fastapi.responses import PlainTextResponse
from fastapi import Request
from fastapi import Header
from jose import jwt
from fastapi import FastAPI, WebSocket, WebSocketDisconnect, Request
from fastapi.responses import JSONResponse
from supabase import create_client, Client
from fastapi.middleware.cors import CORSMiddleware
import requests
import json
import uvicorn
import os
import asyncio
# ‚úÖ Kh·ªüi t·∫°o FastAPI
app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)
# ‚úÖ K·∫øt n·ªëi Supabase
SUPABASE_URL = "https://zkzyawzjmllvqzmedsxd.supabase.co"
SUPABASE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inprenlhd3pqbWxsdnF6bWVkc3hkIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MTQyOTAzNSwiZXhwIjoyMDY3MDA1MDM1fQ.IG8eGax0lUxkUOW8TpJ6M0QvSafB-gM2NWsg6wIOlTU"
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

# ‚úÖ Danh s√°ch thi·∫øt b·ªã ƒëang k·∫øt n·ªëi
connected_devices: dict[str, dict[str, WebSocket]] = {}
reconnect_tasks: dict[str, asyncio.Task] = {}
# ‚úÖ H√†m l·∫•y OTA m·ªõi nh·∫•t


@app.get("/")
async def root():
    return PlainTextResponse("WebSocket OTA Server is running.")


def get_latest_ota(device_name, current_version):
    path = f"ota_muti/{device_name}/ota-latest.json"
    try:
        file = supabase.storage.from_("ota").download(path)
        ota = json.loads(file.decode("utf-8"))
        if ota["version"] != current_version:
            return ota
    except Exception as e:
        print("‚ùå OTA fetch error:", e)
    return None


def update_device(device_id, version):
    supabase.table("devices") \
        .update({"version": version, "status": "done"}) \
        .eq("device_id", device_id) \
        .execute()


async def handle_reconnect_timeout(device_id: str):
    try:
        await asyncio.sleep(30)
        print(f"‚è∞ ESP {device_id} kh√¥ng reconnect sau 30s! Ghi c·∫£nh b√°o.")
        supabase.table("devices").update({
            "warning": "Thi·∫øt b·ªã m·∫•t k·∫øt n·ªëi h∆°n 30 gi√¢y"
        }).eq("device_id", device_id).execute()
    except asyncio.CancelledError:
        print(f"‚úÖ ESP {device_id} ƒë√£ reconnect ‚Äî b·ªè c·∫£nh b√°o")


@app.websocket("/ws/{user_id}")
async def websocket_endpoint(websocket: WebSocket, user_id: str):
    print(f"üåê WebSocket /ws/{user_id} ƒë√£ ƒë∆∞·ª£c g·ªçi")
    await websocket.accept()
    device_id = None

    try:
        while True:
            print(f"{user_id}] Ch·ªù tin nh·∫Øn t·ª´ ESP...")
            message = await websocket.receive_text()
            print(f"[{user_id}] Nh·∫≠n t·ª´ ESP: {message}")

            try:
                data = json.loads(message)
                command = data.get("command")
                device_id = data.get("device_id")

                if command == "REGISTER_DEVICE":
                    if user_id not in connected_devices:
                        connected_devices[user_id] = {}
                    connected_devices[user_id][device_id] = websocket

                    if device_id in reconnect_tasks:
                        reconnect_tasks[device_id].cancel()
                        del reconnect_tasks[device_id]

                    print(f"ESP {device_id} (user {user_id}) ƒë√£ k·∫øt n·ªëi")
                    print("thi·∫øt b·ªã ƒëang k·∫øt n·ªëi:",
                          list(connected_devices[user_id].keys()))

                    update_data = {"is_connect": "new"}

                    if "version" in data:
                        version = data["version"]
                        update_data["version"] = version
                        print(f"üìå Phi√™n b·∫£n firmware: {version}")

                    supabase.table("devices").update(update_data).eq(
                        "device_id", device_id).execute()

                elif command == "UPDATE_FIRMWARE_APPROVE":
                    print(
                        f"ESP {device_id} b·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t: v{data.get('version')}")

                elif command == "UPDATE_FIRMWARE_SUCCESSFULLY":
                    new_version = data.get("version")
                    print(
                        f"ESP {device_id} c·∫≠p nh·∫≠t th√†nh c√¥ng v{new_version}")
                    update_device(device_id, new_version)
                    await websocket.send_json({
                        "command": "ACK_SUCCESS",
                        "message": "ƒê√£ nh·∫≠n x√°c nh·∫≠n c·∫≠p nh·∫≠t th√†nh c√¥ng!"
                    })

                elif command == "UPDATE_FIRMWARE_FAILED":
                    failed_version = data.get("version")
                    error_code = data.get("error_code", "unknown")
                    reason = data.get("reason", "Kh√¥ng r√µ nguy√™n nh√¢n")

                    print(
                        f"ESP {device_id} c·∫≠p nh·∫≠t v{failed_version} th·∫•t b·∫°i")
                    print(f"L·ªói: [{error_code}] - {reason}")

                    supabase.table("devices").update({
                        "status": "failed",
                        "error_code": error_code,
                        "reason": reason
                    }).eq("device_id", device_id).execute()

                    await websocket.send_json({
                        "command": "ACK_FAILED",
                        "message": "Thi·∫øt b·ªã ƒë√£ c√≥ phi√™n b·∫£n m·ªõi nh·∫•t ho·∫∑c l·ªói trong qu√° tr√¨nh c·∫≠p nh·∫≠t.",
                        "error_code": error_code,
                        "reason": reason
                    })

                elif command == "REGISTER_NEW_DEVICE":
                    device_name = data.get("name")
                    version = data.get("version", "unknown")

                    if not device_name:
                        await websocket.send_json({
                            "command": "ACK_FAILED",
                            "message": "Thi·∫øu t√™n thi·∫øt b·ªã!"
                        })
                        return

                    insert_result = supabase.table("devices").insert({
                        "user_id": user_id,
                        "name": device_name,
                        "version": version,
                        "status": "new",
                        "is_connect": "online"
                    }).execute()

                    if insert_result.data and len(insert_result.data) > 0:
                        device_id = insert_result.data[0]["device_id"]

                        if user_id not in connected_devices:
                            connected_devices[user_id] = {}
                        connected_devices[user_id][device_id] = websocket

                        print(
                            f"ƒê√£ t·∫°o v√† k·∫øt n·ªëi thi·∫øt b·ªã m·ªõi: {device_id} cho user {user_id}")
                        print("Thi·∫øt b·ªã ƒëang k·∫øt n·ªëi:",
                              list(connected_devices[user_id].keys()))

                        await websocket.send_json({
                            "command": "ACK_NEW_DEVICE",
                            "device_id": device_id,
                            "message": "Thi·∫øt b·ªã m·ªõi ƒë√£ ƒë∆∞·ª£c t·∫°o"
                        })
                    else:
                        await websocket.send_json({
                            "command": "ACK_FAILED",
                            "message": "Kh√¥ng th·ªÉ t·∫°o thi·∫øt b·ªã m·ªõi"
                        })

                elif command == "LOG":
                    print(f"Log t·ª´ {device_id}: {data}")

                else:
                    print(f"L·ªánh kh√¥ng x√°c ƒë·ªãnh: {command}")

            except Exception as e:
                print("‚ùå L·ªói x·ª≠ l√Ω frame:", e)

    except WebSocketDisconnect:
        print(f"üî¥ ESP {device_id} (user {user_id}) ng·∫Øt k·∫øt n·ªëi")
        if user_id in connected_devices and device_id in connected_devices[user_id]:
            del connected_devices[user_id][device_id]

        supabase.table("devices").update({"is_connect": "offline"}).eq(
            "device_id", device_id).execute()

        task = asyncio.create_task(handle_reconnect_timeout(device_id))
        reconnect_tasks[device_id] = task


# @app.post("/api/update-device")
# async def update_device_api(request: Request):
#     body = await request.json()
#     device_id = body.get("device_id")

#     res = supabase.table("devices").select(
#         "*").eq("device_id", device_id).single().execute()
#     if not res.data:
#         return JSONResponse({"error": "Thi·∫øt b·ªã kh√¥ng t·ªìn t·∫°i"}, status_code=404)

#     device = res.data
#     current_version = device["version"]
#     device_name = device["name"]
#     user_id = device["user_id"]

#     print(f"üöÄ G·ª≠i OTA cho {device_id} ({device_name}) thu·ªôc user {user_id}")

#     ota = get_latest_ota(device_name, current_version)
#     if not ota:
#         return JSONResponse({"message": "Thi·∫øt b·ªã ƒë√£ ·ªü phi√™n b·∫£n m·ªõi nh·∫•t"})

#     if user_id in connected_devices and device_id in connected_devices[user_id]:
#         ws = connected_devices[user_id][device_id]

#         ota_with_device_id = {
#             "device_id": device_id,
#             **ota
#         }

#         await ws.send_json(ota_with_device_id)

#         supabase.table("devices").update({"status": "waiting"}).eq(
#             "device_id", device_id).execute()

#         print(f"‚úÖ ƒê√£ g·ª≠i OTA cho ESP {device_id}")
#         return {"message": "ƒê√£ g·ª≠i OTA", "ota": ota_with_device_id}
#     else:
#         return JSONResponse({"error": "ESP ch∆∞a k·∫øt n·ªëi"}, status_code=400)
@app.post("/api/update-device")
async def update_device_api(request: Request):
    body = await request.json()
    device_ids = body.get("device_ids")  # <- gi·ªù nh·∫≠n 1 list

    if not device_ids or not isinstance(device_ids, list):
        return JSONResponse({"error": "Vui l√≤ng cung c·∫•p danh s√°ch device_ids"}, status_code=400)

    results = []

    for device_id in device_ids:
        try:
            res = supabase.table("devices").select(
                "*").eq("device_id", device_id).single().execute()
            if not res.data:
                results.append(
                    {"device_id": device_id, "status": "‚ùå Kh√¥ng t·ªìn t·∫°i"})
                continue

            device = res.data
            current_version = device["version"]
            device_name = device["name"]
            user_id = device["user_id"]

            print(f"üöÄ X·ª≠ l√Ω OTA cho {device_id} ({device_name})")

            ota = get_latest_ota(device_name, current_version)
            if not ota:
                results.append(
                    {"device_id": device_id, "status": "‚úÖ ƒê√£ ·ªü phi√™n b·∫£n m·ªõi nh·∫•t"})
                continue

            if user_id in connected_devices and device_id in connected_devices[user_id]:
                ws = connected_devices[user_id][device_id]

                ota_with_device_id = {
                    "device_id": device_id,
                    **ota
                }

                await ws.send_json(ota_with_device_id)

                supabase.table("devices").update({"status": "waiting"}).eq(
                    "device_id", device_id).execute()

                print(f"‚úÖ G·ª≠i OTA th√†nh c√¥ng cho ESP {device_id}")
                results.append(
                    {"device_id": device_id, "status": "‚úÖ ƒê√£ g·ª≠i OTA"})
            else:
                results.append(
                    {"device_id": device_id, "status": "‚ö†Ô∏è ESP ch∆∞a k·∫øt n·ªëi"})

        except Exception as e:
            print(f"‚ùå L·ªói khi x·ª≠ l√Ω {device_id}: {e}")
            results.append(
                {"device_id": device_id, "status": f"‚ùå L·ªói: {str(e)}"})

    return {"results": results}


@app.post("/api/login")
async def login(request: Request):
    body = await request.json()
    email = body.get("email")
    password = body.get("password")

    if not email or not password:
        return JSONResponse({"error": "Thi·∫øu email ho·∫∑c m·∫≠t kh·∫©u"}, status_code=400)

    try:
        url = f"{SUPABASE_URL}/auth/v1/token?grant_type=password"
        headers = {
            "apikey": SUPABASE_KEY,
            "Content-Type": "application/json"
        }
        payload = {
            "email": email,
            "password": password
        }

        response = requests.post(url, json=payload, headers=headers)
        if response.status_code != 200:
            return JSONResponse({"error": response.json()}, status_code=401)

        data = response.json()
        access_token = data["access_token"]
        user_id = data["user"]["id"]

        return JSONResponse({
            "message": "‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng",
            "access_token": access_token,
            "user_id": user_id
        })

    except Exception as e:
        return JSONResponse({"error": str(e)}, status_code=500)


@app.post("/api/register")
async def register_user(request: Request):
    body = await request.json()
    email = body.get("email")
    password = body.get("password")
    name = body.get("name")
    phone = body.get("phone")
    role = body.get("role", "user")

    if not email or not password:
        return JSONResponse({"error": "Thi·∫øu email ho·∫∑c password"}, status_code=400)

    try:
        # G·ª≠i POST tr·ª±c ti·∫øp t·ªõi Supabase Auth API
        url = f"{SUPABASE_URL}/auth/v1/admin/users"
        headers = {
            "apikey": SUPABASE_KEY,
            "Authorization": f"Bearer {SUPABASE_KEY}",
            "Content-Type": "application/json"
        }
        payload = {
            "email": email,
            "password": password,
        }

        response = requests.post(url, json=payload, headers=headers)
        if response.status_code >= 300:
            return JSONResponse({"error": response.json()}, status_code=response.status_code)

        user_id = response.json()["id"]

        # G√°n role v√†o b·∫£ng user_profiles
        supabase.table("user_profiles").insert({
            "id": user_id,
            "role": role,
            "name": name,
            "email": email,
            "phone": phone
        }).execute()

        return JSONResponse({"message": "T·∫°o t√†i kho·∫£n th√†nh c√¥ng", "user_id": user_id})

    except Exception as e:
        return JSONResponse({"error": str(e)}, status_code=500)


# üëá Thay b·∫±ng key c·ªßa b·∫°n
SUPABASE_JWT_SECRET = "koJJ0d58iKJYPdhEZhBIBKLEXno9HRWgE6eCC7SVsd/HrbcPfSsxgvppGthK0ciLIBM+RSUSLSnjttsQ+wJ2sA=="


def decode_token(token: str):
    try:
        payload = jwt.decode(
            token,
            SUPABASE_JWT_SECRET,
            algorithms=["HS256"],
            options={"verify_aud": False}
        )
        print("‚úÖ Token payload:", payload)
        return payload.get("sub")
    except Exception as e:
        print("‚ùå Token decode error:", e)
        return None


@app.post("/api/add-device")
async def add_device(request: Request, authorization: str = Header(None)):
    if not authorization or not authorization.startswith("Bearer "):
        return JSONResponse({"error": "Thi·∫øu token"}, status_code=401)

    token = authorization.replace("Bearer ", "").strip()
    user_id = decode_token(token)

    if not user_id:
        return JSONResponse({"error": "Token kh√¥ng h·ª£p l·ªá"}, status_code=403)

    body = await request.json()
    name = body.get("name")
    location = body.get("location")

    if not all([name, location]):
        return JSONResponse({"error": "Thi·∫øu th√¥ng tin thi·∫øt b·ªã"}, status_code=400)

    try:
        insert_result = supabase.table("devices").insert({
            "user_id": user_id,
            "name": name,
            "version": "1.0.0",
            "location": location,
            "status": "none"
        }).execute()

        return JSONResponse({
            "message": "‚úÖ Thi·∫øt b·ªã ƒë√£ ƒë∆∞·ª£c th√™m",
            "device": insert_result.data[0]
        })

    except Exception as e:
        print("‚ùå L·ªói khi th√™m thi·∫øt b·ªã:", e)
        return JSONResponse({"error": "Kh√¥ng th·ªÉ th√™m thi·∫øt b·ªã"}, status_code=500)


@app.delete("/api/delete-device")
async def delete_device(request: Request, authorization: str = Header(None)):
    if not authorization or not authorization.startswith("Bearer "):
        return JSONResponse({"error": "Thi·∫øu token"}, status_code=401)

    token = authorization.replace("Bearer ", "").strip()
    user_id = decode_token(token)

    if not user_id:
        return JSONResponse({"error": "Token kh√¥ng h·ª£p l·ªá"}, status_code=403)

    body = await request.json()
    device_id = body.get("device_id")

    if not device_id:
        return JSONResponse({"error": "Thi·∫øu device_id"}, status_code=400)

    res = supabase.table("devices").select("*").match({
        "user_id": user_id,
        "device_id": device_id
    }).execute()

    if not res.data:
        return JSONResponse({"error": "Thi·∫øt b·ªã kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng thu·ªôc quy·ªÅn s·ªü h·ªØu"}, status_code=404)

    try:
        supabase.table("devices").delete().match({
            "user_id": user_id,
            "device_id": device_id
        }).execute()

        return JSONResponse({"message": f"‚úÖ ƒê√£ xo√° thi·∫øt b·ªã {device_id}"})
    except Exception as e:
        print("‚ùå L·ªói khi xo√° thi·∫øt b·ªã:", e)
        return JSONResponse({"error": "Kh√¥ng th·ªÉ xo√° thi·∫øt b·ªã"}, status_code=500)


@app.post("/api/update-device-info")
async def update_device_info(request: Request, authorization: str = Header(None)):
    if not authorization or not authorization.startswith("Bearer "):
        return JSONResponse({"error": "Thi·∫øu token"}, status_code=401)

    token = authorization.replace("Bearer ", "").strip()
    user_id = decode_token(token)

    if not user_id:
        return JSONResponse({"error": "Token kh√¥ng h·ª£p l·ªá"}, status_code=403)

    body = await request.json()
    device_id = body.get("device_id")
    if not device_id:
        return JSONResponse({"error": "Thi·∫øu device_id"}, status_code=400)

    # üéØ Ch·ªâ cho ph√©p s·ª≠a 3 tr∆∞·ªùng n√†y
    allowed_fields = ["name", "location", "version"]
    update_data = {key: body[key] for key in allowed_fields if key in body}

    if not update_data:
        return JSONResponse({"error": "Kh√¥ng c√≥ tr∆∞·ªùng h·ª£p l·ªá ƒë·ªÉ c·∫≠p nh·∫≠t"}, status_code=400)

    try:
        # üîí Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu thi·∫øt b·ªã
        res = supabase.table("devices").select("user_id").eq(
            "device_id", device_id).single().execute()
        if not res.data:
            return JSONResponse({"error": "Thi·∫øt b·ªã kh√¥ng t·ªìn t·∫°i"}, status_code=404)

        if res.data["user_id"] != user_id:
            return JSONResponse({"error": "B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠a thi·∫øt b·ªã n√†y"}, status_code=403)

        # ‚úÖ Ti·∫øn h√†nh c·∫≠p nh·∫≠t
        result = supabase.table("devices") \
            .update(update_data) \
            .eq("device_id", device_id) \
            .execute()

        return JSONResponse({
            "message": "‚úÖ ƒê√£ c·∫≠p nh·∫≠t thi·∫øt b·ªã th√†nh c√¥ng",
            "device": result.data[0]
        })

    except Exception as e:
        print("‚ùå L·ªói c·∫≠p nh·∫≠t thi·∫øt b·ªã:", e)
        return JSONResponse({"error": str(e)}, status_code=500)


# L·∫•y danh s√°ch thi·∫øt b·ªã c·ªßa ng∆∞·ªùi d√πng


@app.get("/api/my-devices")
async def get_my_devices(authorization: str = Header(None)):
    if not authorization or not authorization.startswith("Bearer "):
        return JSONResponse({"error": "Thi·∫øu token"}, status_code=401)

    token = authorization.replace("Bearer ", "").strip()
    user_id = decode_token(token)

    if not user_id:
        return JSONResponse({"error": "Token kh√¥ng h·ª£p l·ªá"}, status_code=403)

    try:
        response = supabase.table("devices").select(
            "device_id, name, version, location, status, is_connect, warning"
        ).eq("user_id", user_id).order("created_at", desc=True).execute()

        devices = response.data

        return JSONResponse({
            "message": "L·∫•y danh s√°ch thi·∫øt b·ªã th√†nh c√¥ng",
            "devices": devices
        })

    except Exception as e:
        print("‚ùå L·ªói khi l·∫•y danh s√°ch thi·∫øt b·ªã:", e)
        return JSONResponse({"error": "Kh√¥ng th·ªÉ l·∫•y danh s√°ch thi·∫øt b·ªã"}, status_code=500)


@app.get("/api/me")
async def get_current_user(authorization: str = Header(None)):
    if not authorization or not authorization.startswith("Bearer "):
        return JSONResponse({"error": "Thi·∫øu token"}, status_code=401)

    token = authorization.replace("Bearer ", "").strip()
    user_id = decode_token(token)

    if not user_id:
        return JSONResponse({"error": "Token kh√¥ng h·ª£p l·ªá"}, status_code=403)

    try:
        # Ch·ªâ query user_profiles th√¥i, kh√¥ng c·∫ßn ƒë·ª•ng auth.users
        result = supabase.table("user_profiles") \
            .select("id, name, email, phone, role, created_at") \
            .eq("id", user_id) \
            .single() \
            .execute()

        return JSONResponse({
            "user": result.data
        })

    except Exception as e:
        print("‚ùå L·ªói l·∫•y user:", e)
        return JSONResponse({"error": "L·ªói server"}, status_code=500)

# üîÅ Ch·∫°y local v·ªõi port=8765 ho·∫∑c Render t·ª± ch·ªçn PORT
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 8765))
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=port,
        reload=True,
        log_level="debug",
    )
