from fastapi.responses import JSONResponse
from fastapi import Query
from fastapi.responses import PlainTextResponse, JSONResponse
from jose import jwt
from fastapi import FastAPI, WebSocket, WebSocketDisconnect, Header, Request
from fastapi import UploadFile, File, Form, Query
from supabase import create_client, Client
from fastapi.middleware.cors import CORSMiddleware
from datetime import date
import httpx
import requests
import json
import uvicorn
import os
import asyncio
import traceback
# ‚úÖ Kh·ªüi t·∫°o FastAPI
app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)
# ‚úÖ K·∫øt n·ªëi Supabase
SUPABASE_URL = "https://zkzyawzjmllvqzmedsxd.supabase.co"
SUPABASE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inprenlhd3pqbWxsdnF6bWVkc3hkIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MTQyOTAzNSwiZXhwIjoyMDY3MDA1MDM1fQ.IG8eGax0lUxkUOW8TpJ6M0QvSafB-gM2NWsg6wIOlTU"
SUPABASE_JWT_SECRET = "koJJ0d58iKJYPdhEZhBIBKLEXno9HRWgE6eCC7SVsd/HrbcPfSsxgvppGthK0ciLIBM+RSUSLSnjttsQ+wJ2sA=="
SUPABASE_BUCKET = "ota"
SUPABASE_FOLDER = "ota_muti"
PUBLIC_BASE = f"https://zkzyawzjmllvqzmedsxd.storage.supabase.co/v1/object/public/{SUPABASE_BUCKET}/{SUPABASE_FOLDER}"
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

# ‚úÖ Danh s√°ch thi·∫øt b·ªã ƒëang k·∫øt n·ªëi
connected_devices: dict[str, dict[str, WebSocket]] = {}
reconnect_tasks: dict[str, asyncio.Task] = {}
# ‚úÖ H√†m l·∫•y OTA m·ªõi nh·∫•t


@app.get("/")
async def root():
    return PlainTextResponse("WebSocket OTA Server is running.")


def get_latest_ota(device_name, current_version):
    path = f"ota_muti/{device_name}/ota-latest.json"
    try:
        file = supabase.storage.from_("ota").download(path)
        ota = json.loads(file.decode("utf-8"))
        if ota["version"] != current_version:
            return ota
    except Exception as e:
        print("‚ùå OTA fetch error:", e)
    return None


def update_device(device_id, version):
    supabase.table("devices") \
        .update({"version": version, "status": "done"}) \
        .eq("device_id", device_id) \
        .execute()


async def handle_reconnect_timeout(device_id: str):
    try:
        await asyncio.sleep(30)
        print(f"‚è∞ ESP {device_id} kh√¥ng reconnect sau 30s! Ghi c·∫£nh b√°o.")
        supabase.table("devices").update({
            "warning": "Thi·∫øt b·ªã m·∫•t k·∫øt n·ªëi h∆°n 30 gi√¢y"
        }).eq("device_id", device_id).execute()
    except asyncio.CancelledError:
        print(f"‚úÖ ESP {device_id} ƒë√£ reconnect ‚Äî b·ªè c·∫£nh b√°o")


@app.websocket("/ws/{user_id}")
async def websocket_endpoint(websocket: WebSocket, user_id: str):
    print(f"üåê WebSocket /ws/{user_id} ƒë√£ ƒë∆∞·ª£c g·ªçi")
    await websocket.accept()
    device_id = None

    try:
        while True:
            print(f"{user_id}] Ch·ªù tin nh·∫Øn t·ª´ ESP...")
            message = await websocket.receive_text()
            print(f"[{user_id}] Nh·∫≠n t·ª´ ESP: {message}")

            try:
                data = json.loads(message)
                command = data.get("command")
                device_id = data.get("device_id")

                if command == "REGISTER_DEVICE":
                    if user_id not in connected_devices:
                        connected_devices[user_id] = {}
                    connected_devices[user_id][device_id] = websocket

                    if device_id in reconnect_tasks:
                        reconnect_tasks[device_id].cancel()
                        del reconnect_tasks[device_id]

                    print(f"ESP {device_id} (user {user_id}) ƒë√£ k·∫øt n·ªëi")
                    print("thi·∫øt b·ªã ƒëang k·∫øt n·ªëi:",
                          list(connected_devices[user_id].keys()))

                    update_data = {"is_connect": "online"}

                    if "version" in data:
                        version = data["version"]
                        update_data["version"] = version
                        print(f"üìå Phi√™n b·∫£n firmware: {version}")

                    supabase.table("devices").update(update_data).eq(
                        "device_id", device_id).execute()

                elif command == "UPDATE_FIRMWARE_APPROVE":
                    print(
                        f"ESP {device_id} b·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t: v{data.get('version')}", flush=True)

                elif command == "UPDATE_FIRMWARE_SUCCESSFULLY":
                    new_version = data.get("version")
                    print(
                        f"ESP {device_id} c·∫≠p nh·∫≠t th√†nh c√¥ng v{new_version}", flush=True)
                    update_device(device_id, new_version)
                    await websocket.send_json({
                        "command": "ACK_SUCCESS",
                        "message": "ƒê√£ nh·∫≠n x√°c nh·∫≠n c·∫≠p nh·∫≠t th√†nh c√¥ng!"
                    })

                elif command == "UPDATE_FIRMWARE_FAILED":
                    failed_version = data.get("version")
                    error_code = data.get("error_code", "unknown")
                    reason = data.get("reason", "Kh√¥ng r√µ nguy√™n nh√¢n")

                    print(
                        f"ESP {device_id} c·∫≠p nh·∫≠t v{failed_version} th·∫•t b·∫°i", flush=True)
                    print(f"L·ªói: [{error_code}] - {reason}")

                    supabase.table("devices").update({
                        "status": "failed",
                        "error_code": error_code,
                        "reason": reason
                    }).eq("device_id", device_id).execute()

                    await websocket.send_json({
                        "command": "ACK_FAILED",
                        "message": "Thi·∫øt b·ªã ƒë√£ c√≥ phi√™n b·∫£n m·ªõi nh·∫•t ho·∫∑c l·ªói trong qu√° tr√¨nh c·∫≠p nh·∫≠t.",
                        "error_code": error_code,
                        "reason": reason
                    })

                elif command == "REGISTER_NEW_DEVICE":
                    version = data.get("version", "unknown")

                    insert_result = supabase.table("devices").insert({
                        "user_id": user_id,
                        "version": version,
                        "status": "new_divice",
                        "is_connect": "online"
                    }).execute()

                    if insert_result.data and len(insert_result.data) > 0:
                        device_id = insert_result.data[0]["device_id"]

                        if user_id not in connected_devices:
                            connected_devices[user_id] = {}
                        connected_devices[user_id][device_id] = websocket

                        print(
                            f"ƒê√£ t·∫°o v√† k·∫øt n·ªëi thi·∫øt b·ªã m·ªõi: {device_id} cho user {user_id}", flush=True)
                        print("Thi·∫øt b·ªã ƒëang k·∫øt n·ªëi:",
                              list(connected_devices[user_id].keys()))

                        await websocket.send_json({
                            "command": "ACK_NEW_DEVICE",
                            "device_id": device_id,
                            "message": "Thi·∫øt b·ªã m·ªõi ƒë√£ ƒë∆∞·ª£c t·∫°o"
                        })
                    else:
                        await websocket.send_json({
                            "command": "ACK_FAILED",
                            "message": "Kh√¥ng th·ªÉ t·∫°o thi·∫øt b·ªã m·ªõi"
                        })
                else:
                    print(f"L·ªánh kh√¥ng x√°c ƒë·ªãnh: {command}")

            except Exception as e:
                print("‚ùå L·ªói x·ª≠ l√Ω frame:", e)

    except WebSocketDisconnect:
        print(f"üî¥ ESP {device_id} (user {user_id}) ng·∫Øt k·∫øt n·ªëi")
        if user_id in connected_devices and device_id in connected_devices[user_id]:
            del connected_devices[user_id][device_id]

        supabase.table("devices").update({"is_connect": "offline"}).eq(
            "device_id", device_id).execute()

        task = asyncio.create_task(handle_reconnect_timeout(device_id))
        reconnect_tasks[device_id] = task


@app.post("/api/update-device")
async def update_device_api(request: Request):
    body = await request.json()
    device_ids = body.get("device_ids")

    if not device_ids or not isinstance(device_ids, list):
        return JSONResponse({"error": "Vui l√≤ng cung c·∫•p danh s√°ch device_ids"}, status_code=400)

    results = []

    for device_id in device_ids:
        try:
            res = supabase.table("devices").select(
                "*").eq("device_id", device_id).single().execute()
            if not res.data:
                results.append(
                    {"device_id": device_id, "status": "Kh√¥ng t·ªìn t·∫°i"})
                continue

            device = res.data
            current_version = device["version"]
            device_name = device["name"]
            user_id = device["user_id"]

            # üîí N·∫øu thi·∫øt b·ªã ch∆∞a c√≥ t√™n, kh√¥ng cho update OTA
            if not device_name or device_name.strip() == "":
                results.append({
                    "device_id": device_id,
                    "status": "Thi·∫øt b·ªã ch∆∞a ƒë·∫∑t t√™n. Vui l√≤ng ƒë·∫∑t t√™n tr∆∞·ªõc khi c·∫≠p nh·∫≠t"
                })
                continue

            print(f"üöÄ X·ª≠ l√Ω OTA cho {device_id} ({device_name})")

            ota = get_latest_ota(device_name, current_version)
            if not ota:
                results.append({
                    "device_id": device_id,
                    "status": "‚úÖ ƒê√£ ·ªü phi√™n b·∫£n m·ªõi nh·∫•t"
                })
                continue

            if user_id in connected_devices and device_id in connected_devices[user_id]:
                ws = connected_devices[user_id][device_id]

                ota_with_device_id = {
                    "device_id": device_id,
                    **ota
                }

                await ws.send_json(ota_with_device_id)

                supabase.table("devices").update({"status": "waiting"}).eq(
                    "device_id", device_id).execute()

                print(f"‚úÖ G·ª≠i OTA th√†nh c√¥ng cho ESP {device_id}")
                results.append({
                    "device_id": device_id,
                    "status": "‚úÖ ƒê√£ g·ª≠i OTA"
                })
            else:
                results.append({
                    "device_id": device_id,
                    "status": "‚ö†Ô∏è ESP ch∆∞a k·∫øt n·ªëi"
                })

        except Exception as e:
            print(f"‚ùå L·ªói khi x·ª≠ l√Ω {device_id}: {e}")
            results.append({
                "device_id": device_id,
                "status": f"‚ùå L·ªói: {str(e)}"
            })

    return {"results": results}


def get_ota_by_version(device_name, version):
    if not version.startswith("v"):
        version = f"v{version}"

    ota_url = f"{PUBLIC_BASE}/{device_name}/{version}/ota.json"
    try:
        resp = httpx.get(ota_url, timeout=5)
        if resp.status_code == 200:
            return resp.json()
        else:
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y OTA {version}: {resp.status_code}")
            return None
    except Exception as e:
        print(f"‚ùå L·ªói khi t·∫£i OTA {version}: {e}")
        return None


@app.post("/api/update-device-version")
async def update_device_api(request: Request):
    body = await request.json()
    device_ids = body.get("device_ids")
    version = body.get("version")  # Th√™m version t·ª´ body

    if not device_ids or not isinstance(device_ids, list):
        return JSONResponse({"error": "Vui l√≤ng cung c·∫•p danh s√°ch device_ids"}, status_code=400)
    if not version:
        return JSONResponse({"error": "Vui l√≤ng cung c·∫•p version"}, status_code=400)

    results = []

    for device_id in device_ids:
        try:
            res = supabase.table("devices").select(
                "*").eq("device_id", device_id).single().execute()
            if not res.data:
                results.append(
                    {"device_id": device_id, "status": "Kh√¥ng t·ªìn t·∫°i"})
                continue

            device = res.data
            device_name = device["name"]
            user_id = device["user_id"]

            if not device_name or device_name.strip() == "":
                results.append({
                    "device_id": device_id,
                    "status": "Thi·∫øt b·ªã ch∆∞a ƒë·∫∑t t√™n. Vui l√≤ng ƒë·∫∑t t√™n tr∆∞·ªõc khi c·∫≠p nh·∫≠t"
                })
                continue

            print(f"üöÄ X·ª≠ l√Ω OTA {version} cho {device_id} ({device_name})")

            ota = get_ota_by_version(device_name, version)
            if not ota:
                results.append({
                    "device_id": device_id,
                    "status": f"‚ùå Kh√¥ng t√¨m th·∫•y OTA version {version} cho thi·∫øt b·ªã '{device_name}'"
                })
                continue

            if user_id in connected_devices and device_id in connected_devices[user_id]:
                ws = connected_devices[user_id][device_id]

                ota_with_device_id = {
                    "device_id": device_id,
                    **ota
                }

                await ws.send_json(ota_with_device_id)

                supabase.table("devices").update({"status": "waiting"}).eq(
                    "device_id", device_id).execute()

                print(f"‚úÖ G·ª≠i OTA {version} th√†nh c√¥ng cho ESP {device_id}")
                results.append({
                    "device_id": device_id,
                    "status": f"‚úÖ ƒê√£ g·ª≠i OTA version {version}"
                })
            else:
                results.append({
                    "device_id": device_id,
                    "status": "‚ö†Ô∏è ESP ch∆∞a k·∫øt n·ªëi"
                })

        except Exception as e:
            print(f"‚ùå L·ªói khi x·ª≠ l√Ω {device_id}: {e}")
            results.append({
                "device_id": device_id,
                "status": f"‚ùå L·ªói: {str(e)}"
            })

    return {"results": results}


@app.post("/api/login")
async def login(request: Request):
    body = await request.json()
    email = body.get("email")
    password = body.get("password")

    if not email or not password:
        return JSONResponse({"error": "Thi·∫øu email ho·∫∑c m·∫≠t kh·∫©u"}, status_code=400)

    try:
        url = f"{SUPABASE_URL}/auth/v1/token?grant_type=password"
        headers = {
            "apikey": SUPABASE_KEY,
            "Content-Type": "application/json"
        }
        payload = {
            "email": email,
            "password": password
        }

        response = requests.post(url, json=payload, headers=headers)
        if response.status_code != 200:
            return JSONResponse({"error": response.json()}, status_code=401)

        data = response.json()
        access_token = data["access_token"]
        user_id = data["user"]["id"]

        return JSONResponse({
            "message": "‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng",
            "access_token": access_token,
            "user_id": user_id
        })

    except Exception as e:
        return JSONResponse({"error": str(e)}, status_code=500)


@app.post("/api/register")
async def register_user(request: Request):
    body = await request.json()
    email = body.get("email")
    password = body.get("password")
    name = body.get("name")
    phone = body.get("phone")
    role = body.get("role", "user")

    if not email or not password:
        return JSONResponse({"error": "Thi·∫øu email ho·∫∑c password"}, status_code=400)

    try:
        # üìå Ki·ªÉm tra email ƒë√£ c√≥ trong b·∫£ng user_profiles
        check = supabase.table("user_profiles") \
            .select("email") \
            .eq("email", email) \
            .execute()

        if check.data and len(check.data) > 0:
            return JSONResponse({
                "error": "Email ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω"
            }, status_code=409)  # 409 Conflict

        # üì© G·ª≠i POST t·ªõi Supabase Auth API ƒë·ªÉ t·∫°o t√†i kho·∫£n
        url = f"{SUPABASE_URL}/auth/v1/admin/users"
        headers = {
            "apikey": SUPABASE_KEY,
            "Authorization": f"Bearer {SUPABASE_KEY}",
            "Content-Type": "application/json"
        }
        payload = {
            "email": email,
            "password": password,
        }

        response = requests.post(url, json=payload, headers=headers)

        # ‚úÖ N·∫øu email ƒë√£ t·ªìn t·∫°i trong Auth
        if response.status_code == 422:
            error_data = response.json()
            if error_data.get("error_code") == "email_exists":
                return JSONResponse({
                    "message": "Email ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω trong h·ªá th·ªëng"
                }, status_code=409)

        # ‚ùå C√°c l·ªói kh√°c
        if response.status_code >= 300:
            return JSONResponse({"message": response.json()}, status_code=response.status_code)

        # üÜî L·∫•y user_id t·ª´ Auth ƒë·ªÉ l∆∞u v√†o b·∫£ng user_profiles
        user_id = response.json()["id"]

        # üíæ Insert v√†o b·∫£ng user_profiles
        supabase.table("user_profiles").insert({
            "id": user_id,
            "role": role,
            "name": name,
            "email": email,
            "phone": phone
        }).execute()

        return JSONResponse({
            "message": "‚úÖ T·∫°o t√†i kho·∫£n th√†nh c√¥ng",
            "user_id": user_id
        })

    except Exception as e:
        print("‚ùå L·ªói t·∫°o t√†i kho·∫£n:", e)
        return JSONResponse({"error": str(e)}, status_code=500)


@app.post("/api/forgot-password")
async def forgot_password(request: Request):
    body = await request.json()
    email = body.get("email")

    if not email:
        return JSONResponse({"error": "Vui l√≤ng nh·∫≠p email"}, status_code=400)

    try:
        url = f"{SUPABASE_URL}/auth/v1/recover"
        headers = {
            "apikey": SUPABASE_KEY,
            "Content-Type": "application/json"
        }
        payload = {
            "email": email
        }

        response = requests.post(url, json=payload, headers=headers)

        if response.status_code == 200:
            return JSONResponse({"message": "üì© Email kh√¥i ph·ª•c m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c g·ª≠i."})
        else:
            return JSONResponse({"error": response.json()}, status_code=response.status_code)

    except Exception as e:
        return JSONResponse({"error": str(e)}, status_code=500)


def decode_token(token: str):
    try:
        payload = jwt.decode(
            token,
            SUPABASE_JWT_SECRET,
            algorithms=["HS256"],
            options={"verify_aud": False}
        )
        print("‚úÖ Token payload:", payload)
        return payload.get("sub")
    except Exception as e:
        print("‚ùå Token decode error:", e)
        return None


@app.post("/api/add-device")
async def add_device(request: Request, authorization: str = Header(None)):
    if not authorization or not authorization.startswith("Bearer "):
        return JSONResponse({"error": "Thi·∫øu token"}, status_code=401)

    token = authorization.replace("Bearer ", "").strip()
    user_id = decode_token(token)

    if not user_id:
        return JSONResponse({"error": "Token kh√¥ng h·ª£p l·ªá"}, status_code=403)

    body = await request.json()
    name = body.get("name")
    location = body.get("location")

    if not all([name, location]):
        return JSONResponse({"error": "Thi·∫øu th√¥ng tin thi·∫øt b·ªã"}, status_code=400)

    try:
        insert_result = supabase.table("devices").insert({
            "user_id": user_id,
            "name": name,
            "version": "1.0.0",
            "location": location,
            "status": "none"
        }).execute()

        return JSONResponse({
            "message": "‚úÖ Thi·∫øt b·ªã ƒë√£ ƒë∆∞·ª£c th√™m",
            "device": insert_result.data[0]
        })

    except Exception as e:
        print("‚ùå L·ªói khi th√™m thi·∫øt b·ªã:", e)
        return JSONResponse({"error": "Kh√¥ng th·ªÉ th√™m thi·∫øt b·ªã"}, status_code=500)


@app.delete("/api/delete-device")
async def delete_device(request: Request, authorization: str = Header(None)):
    if not authorization or not authorization.startswith("Bearer "):
        return JSONResponse({"error": "Thi·∫øu token"}, status_code=401)

    token = authorization.replace("Bearer ", "").strip()
    user_id = decode_token(token)

    if not user_id:
        return JSONResponse({"error": "Token kh√¥ng h·ª£p l·ªá"}, status_code=403)

    body = await request.json()
    device_id = body.get("device_id")

    if not device_id:
        return JSONResponse({"error": "Thi·∫øu device_id"}, status_code=400)

    res = supabase.table("devices").select("*").match({
        "user_id": user_id,
        "device_id": device_id
    }).execute()

    if not res.data:
        return JSONResponse({"error": "Thi·∫øt b·ªã kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng thu·ªôc quy·ªÅn s·ªü h·ªØu"}, status_code=404)

    try:
        supabase.table("devices").delete().match({
            "user_id": user_id,
            "device_id": device_id
        }).execute()

        return JSONResponse({"message": f"‚úÖ ƒê√£ xo√° thi·∫øt b·ªã {device_id}"})
    except Exception as e:
        print("‚ùå L·ªói khi xo√° thi·∫øt b·ªã:", e)
        return JSONResponse({"error": "Kh√¥ng th·ªÉ xo√° thi·∫øt b·ªã"}, status_code=500)


@app.post("/api/update-device-info")
async def update_device_info(request: Request, authorization: str = Header(None)):
    if not authorization or not authorization.startswith("Bearer "):
        return JSONResponse({"error": "Thi·∫øu token"}, status_code=401)

    token = authorization.replace("Bearer ", "").strip()
    user_id = decode_token(token)

    if not user_id:
        return JSONResponse({"error": "Token kh√¥ng h·ª£p l·ªá"}, status_code=403)

    body = await request.json()
    device_id = body.get("device_id")
    if not device_id:
        return JSONResponse({"error": "Thi·∫øu device_id"}, status_code=400)

    # üéØ Ch·ªâ cho ph√©p s·ª≠a 3 tr∆∞·ªùng n√†y
    allowed_fields = ["name", "location", "version"]
    update_data = {key: body[key] for key in allowed_fields if key in body}

    if not update_data:
        return JSONResponse({"error": "Kh√¥ng c√≥ tr∆∞·ªùng h·ª£p l·ªá ƒë·ªÉ c·∫≠p nh·∫≠t"}, status_code=400)

    try:
        # üîí Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu thi·∫øt b·ªã
        res = supabase.table("devices").select("user_id").eq(
            "device_id", device_id).single().execute()
        if not res.data:
            return JSONResponse({"error": "Thi·∫øt b·ªã kh√¥ng t·ªìn t·∫°i"}, status_code=404)

        if res.data["user_id"] != user_id:
            return JSONResponse({"error": "B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠a thi·∫øt b·ªã n√†y"}, status_code=403)

        # ‚úÖ Ti·∫øn h√†nh c·∫≠p nh·∫≠t
        result = supabase.table("devices") \
            .update(update_data) \
            .eq("device_id", device_id) \
            .execute()

        return JSONResponse({
            "message": "‚úÖ ƒê√£ c·∫≠p nh·∫≠t thi·∫øt b·ªã th√†nh c√¥ng",
            "device": result.data[0]
        })

    except Exception as e:
        print("‚ùå L·ªói c·∫≠p nh·∫≠t thi·∫øt b·ªã:", e)
        return JSONResponse({"error": str(e)}, status_code=500)


# L·∫•y danh s√°ch thi·∫øt b·ªã c·ªßa ng∆∞·ªùi d√πng


@app.get("/api/my-devices")
async def get_my_devices(authorization: str = Header(None)):
    if not authorization or not authorization.startswith("Bearer "):
        return JSONResponse({"error": "Thi·∫øu token"}, status_code=401)

    token = authorization.replace("Bearer ", "").strip()
    user_id = decode_token(token)

    if not user_id:
        return JSONResponse({"error": "Token kh√¥ng h·ª£p l·ªá"}, status_code=403)

    try:
        response = supabase.table("devices").select(
            "device_id, name, version, location, status, is_connect, warning"
        ).eq("user_id", user_id).order("created_at", desc=True).execute()

        devices = response.data

        return JSONResponse({
            "message": "L·∫•y danh s√°ch thi·∫øt b·ªã th√†nh c√¥ng",
            "devices": devices
        })

    except Exception as e:
        print("‚ùå L·ªói khi l·∫•y danh s√°ch thi·∫øt b·ªã:", e)
        return JSONResponse({"error": "Kh√¥ng th·ªÉ l·∫•y danh s√°ch thi·∫øt b·ªã"}, status_code=500)


@app.get("/api/me")
async def get_current_user(authorization: str = Header(None)):
    if not authorization or not authorization.startswith("Bearer "):
        return JSONResponse({"error": "Thi·∫øu token"}, status_code=401)

    token = authorization.replace("Bearer ", "").strip()
    user_id = decode_token(token)

    if not user_id:
        return JSONResponse({"error": "Token kh√¥ng h·ª£p l·ªá"}, status_code=403)

    try:
        # Ch·ªâ query user_profiles th√¥i, kh√¥ng c·∫ßn ƒë·ª•ng auth.users
        result = supabase.table("user_profiles") \
            .select("id, name, email, phone, role, created_at") \
            .eq("id", user_id) \
            .single() \
            .execute()

        return JSONResponse({
            "user": result.data
        })

    except Exception as e:
        print("‚ùå L·ªói l·∫•y user:", e)
        return JSONResponse({"error": "L·ªói server"}, status_code=500)


@app.post("/api/upload-firmware")
async def upload_firmware(
    device_name: str = Form(...),
    version: str = Form(...),
    changelog: str = Form(None),
    file: UploadFile = File(...)
):
    try:
        # ‚úÖ Chu·∫©n h√≥a version
        if not version.startswith("v"):
            version = f"v{version}"

        # ‚úÖ ƒê∆∞·ªùng d·∫´n Supabase
        folder_path = f"{SUPABASE_FOLDER}/{device_name}/{version}"
        firmware_path = f"{folder_path}/firmware.bin"
        latest_json_path = f"{SUPABASE_FOLDER}/{device_name}/ota-latest.json"
        version_json_path = f"{folder_path}/ota.json"

        async with httpx.AsyncClient() as client:
            # ‚úÖ ƒê·ªçc file
            firmware_bytes = await file.read()

            # ‚úÖ Upload firmware.bin (ghi ƒë√®)
            resp = await client.put(
                f"{SUPABASE_URL}/storage/v1/object/{SUPABASE_BUCKET}/{firmware_path}",
                content=firmware_bytes,
                headers={
                    "Authorization": f"Bearer {SUPABASE_KEY}",
                    "Content-Type": "application/octet-stream"
                },
                params={"upsert": "true"}
            )
            if resp.status_code >= 400:
                return JSONResponse({
                    "error": "‚ùå Upload firmware th·∫•t b·∫°i",
                    "detail": resp.text
                }, status_code=500)

            # ‚úÖ T·∫°o n·ªôi dung ota JSON
            file_size = round(len(firmware_bytes) / (1024 * 1024), 2)
            today = str(date.today())
            public_url = f"{PUBLIC_BASE}/{device_name}/{version}/firmware.bin"
            ota = {
                "version": version.replace("v", ""),
                "file": "firmware.bin",
                "url": public_url,
                "size": str(file_size),
                "released": today
            }
            ota_bytes = json.dumps(ota, indent=2).encode("utf-8")

            # ‚úÖ Upload ota-latest.json
            latest_resp = await client.put(
                f"{SUPABASE_URL}/storage/v1/object/{SUPABASE_BUCKET}/{latest_json_path}",
                content=ota_bytes,
                headers={
                    "Authorization": f"Bearer {SUPABASE_KEY}",
                    "Content-Type": "application/json"
                },
                params={"upsert": "true"}
            )
            if latest_resp.status_code >= 400:
                return JSONResponse({
                    "error": "‚ùå L·ªói ghi ota-latest.json",
                    "detail": latest_resp.text
                }, status_code=500)

            # ‚úÖ Upload ota.json trong th∆∞ m·ª•c version
            version_resp = await client.post(
                f"{SUPABASE_URL}/storage/v1/object/{SUPABASE_BUCKET}/{version_json_path}",
                content=ota_bytes,
                headers={
                    "Authorization": f"Bearer {SUPABASE_KEY}",
                    "Content-Type": "application/json"
                },
                params={"upsert": "true"}
            )
            if version_resp.status_code >= 400:
                return JSONResponse({
                    "error": "‚ùå Firmware v√† ota-latest ok, nh∆∞ng l·ªói khi ghi ota.json",
                    "detail": version_resp.text
                }, status_code=500)

        # 1. ƒê√°nh d·∫•u c√°c b·∫£n tr∆∞·ªõc ƒë√≥ l√† is_latest = false
        supabase.table("firmware_versions") \
            .update({"is_latest": False}) \
            .eq("device_name", device_name) \
            .execute()

        # 2. Th√™m b·∫£n m·ªõi
        supabase.table("firmware_versions").insert({
            "device_name": device_name,
            "version": version.replace("v", ""),
            "changelog": changelog or "",
            "file_url": public_url,
            "is_latest": True,
        }).execute()

        return {
            "message": f"‚úÖ ƒê√£ upload firmware {version} cho thi·∫øt b·ªã '{device_name}'",
            "firmware_url": public_url,
            "ota_info": ota
        }

    except Exception as e:
        traceback.print_exc()
        return JSONResponse({
            "error": "üî• Server exception",
            "detail": str(e)
        }, status_code=500)


@app.get("/api/list-versions")
async def get_all_firmware_versions():
    try:
        res = supabase.table("firmware_versions") \
            .select("device_name, version, changelog, release_date, file_url, is_latest, created_at") \
            .order("device_name", desc=False) \
            .order("release_date", desc=True) \
            .execute()

        if not res.data:
            return JSONResponse({"message": "Kh√¥ng c√≥ d·ªØ li·ªáu firmware"}, status_code=404)

        grouped = {}
        for item in res.data:
            name = item["device_name"]
            if name not in grouped:
                grouped[name] = []
            grouped[name].append(item)

        return grouped

    except Exception as e:
        print("‚ùå L·ªói khi l·∫•y t·∫•t c·∫£ firmware:", e)
        return JSONResponse({"error": "L·ªói server", "detail": str(e)}, status_code=500)


@app.delete("/api/delete-version")
async def delete_version(device_name: str = Query(...), version: str = Query(...)):
    version_folder = f"v{version}"  # vd: v1.2.1
    # vd: ota_muti/dataloger/v1.2.1
    base_path = f"{SUPABASE_FOLDER}/{device_name}/{version_folder}"

    # C√°c file c·∫ßn xo√°
    firmware_path = f"{base_path}/firmware.bin"
    ota_json_path = f"{base_path}/ota.json"

    try:
        async with httpx.AsyncClient() as client:
            for file_path in [firmware_path, ota_json_path]:
                resp = await client.delete(
                    f"{SUPABASE_URL}/storage/v1/object/{SUPABASE_BUCKET}/{file_path}",
                    headers={"Authorization": f"Bearer {SUPABASE_KEY}"}
                )
                if resp.status_code >= 300:
                    print(f"‚ö†Ô∏è Kh√¥ng xo√° ƒë∆∞·ª£c {file_path}: {resp.text}")
                    return JSONResponse({
                        "error": f"‚ùå Kh√¥ng xo√° ƒë∆∞·ª£c {file_path}",
                        "detail": resp.text
                    }, status_code=500)

        # ‚úÖ Sau khi xo√° file, xo√° b·∫£n ghi trong b·∫£ng firmware_versions
        supabase.table("firmware_versions") \
            .delete() \
            .eq("device_name", device_name) \
            .eq("version", version) \
            .execute()

        return {
            "message": f"‚úÖ ƒê√£ xo√° version '{version}' v√† c√°c file firmware c·ªßa thi·∫øt b·ªã '{device_name}'"
        }

    except Exception as e:
        print("‚ùå L·ªói khi xo√° file OTA:", e)
        return JSONResponse({"error": str(e)}, status_code=500)


if __name__ == "__main__":
    port = int(os.environ.get("PORT", 8765))
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=port,
        reload=True,
        log_level="debug",
    )
