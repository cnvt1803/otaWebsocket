import asyncio
import websockets
import json
from datetime import datetime
import random

DEVICE_ID = "006"
DEVICE_VERSION = "1.0.0"
WS_ENDPOINT = "ws://localhost:8765/ws"
SIMULATE_FAIL = True  # ƒê·∫∑t False n·∫øu mu·ªën test OTA th√†nh c√¥ng


async def send_ping(websocket):
    while True:
        await asyncio.sleep(20)
        ping = {
            "command": "PING",
            "device_id": DEVICE_ID
        }
        print("üì° G·ª≠i ping:", ping)
        await websocket.send(json.dumps(ping))


async def send_log(websocket):
    while True:
        await asyncio.sleep(60)
        log_data = {
            "command": "LOG",
            "device_id": DEVICE_ID,
            "timestamp": datetime.now().isoformat(),
            "message": "Thi·∫øt b·ªã ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng."
        }
        print("üìù G·ª≠i log:", log_data)
        await websocket.send(json.dumps(log_data))

# ==================================
# üîÅ Ph·∫£n h·ªìi khi nh·∫≠n UPDATE_FIRMWARE
# ==================================


async def respond_ota(websocket, version, url):
    print(f"üöÄ Nh·∫≠n y√™u c·∫ßu OTA: v{version} t·ª´ {url}")

    # G·ª≠i APPROVE tr∆∞·ªõc khi c·∫≠p nh·∫≠t
    await websocket.send(json.dumps({
        "command": "UPDATE_FIRMWARE_APPROVE",
        "device_id": DEVICE_ID,
        "version": version
    }))
    print("üì¶ B·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t...")

    await asyncio.sleep(3)

    if SIMULATE_FAIL:
        # Gi·∫£ l·∫≠p l·ªói OTA
        error_list = [
            ("FLASH_ERROR", "Kh√¥ng th·ªÉ ghi v√†o b·ªô nh·ªõ flash."),
            ("CHECKSUM_FAIL", "Sai m√£ ki·ªÉm tra checksum."),
            ("NETWORK_LOSS", "M·∫•t k·∫øt n·ªëi trong l√∫c c·∫≠p nh·∫≠t."),
            ("DISK_FULL", "Kh√¥ng ƒë·ªß b·ªô nh·ªõ ƒë·ªÉ ghi firmware.")
        ]
        error_code, reason = random.choice(error_list)

        await websocket.send(json.dumps({
            "command": "UPDATE_FIRMWARE_FAILED",
            "device_id": DEVICE_ID,
            "version": version,
            "error_code": error_code,
            "reason": reason
        }))
        print(f"‚ùå OTA th·∫•t b·∫°i: [{error_code}] - {reason}")
    else:
        # OTA th√†nh c√¥ng
        await websocket.send(json.dumps({
            "command": "UPDATE_FIRMWARE_SUCCESSFULLY",
            "device_id": DEVICE_ID,
            "version": version
        }))
        print("‚úÖ OTA th√†nh c√¥ng.")


async def fake_esp():
    try:
        async with websockets.connect(WS_ENDPOINT) as websocket:
            # G·ª≠i REGISTER_DEVICE
            await websocket.send(json.dumps({
                "command": "REGISTER_DEVICE",
                "device_id": DEVICE_ID,
                "version": DEVICE_VERSION
            }))
            print(
                f"üîå ESP {DEVICE_ID} ƒë√£ k·∫øt n·ªëi v·ªõi firmware v{DEVICE_VERSION}")

            asyncio.create_task(send_ping(websocket))
            asyncio.create_task(send_log(websocket))

            # Nh·∫≠n l·ªánh t·ª´ server
            while True:
                try:
                    message = await websocket.recv()
                    print("üì© Nh·∫≠n t·ª´ server:", message)
                    data = json.loads(message)
                    command = data.get("command")

                    if command == "UPDATE_FIRMWARE":
                        await respond_ota(
                            websocket,
                            data.get("version"),
                            data.get("url")
                        )
                    elif command == "ACK_SUCCESS":
                        print("üì¨ Server x√°c nh·∫≠n c·∫≠p nh·∫≠t th√†nh c√¥ng.")
                    elif command == "ACK_FAILED":
                        print("‚ö†Ô∏è Server b√°o l·ªói OTA:", data.get("reason"))
                    else:
                        print("‚ùì L·ªánh kh√¥ng x√°c ƒë·ªãnh:", command)

                except websockets.exceptions.ConnectionClosed:
                    print("‚ùå M·∫•t k·∫øt n·ªëi v·ªõi server.")
                    break

    except ConnectionRefusedError:
        print("üö´ Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn WebSocket server.")
    except Exception as e:
        print("üí• L·ªói kh√¥ng x√°c ƒë·ªãnh:", e)

if __name__ == "__main__":
    asyncio.run(fake_esp())
